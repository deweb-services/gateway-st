// Code generated by MockGen. DO NOT EDIT.
// Source: new.go
//
// Generated by this command:
//
//	mockgen -source new.go -destination=./mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/deweb-services/gateway-st/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockaccessKeyer is a mock of accessKeyer interface.
type MockaccessKeyer struct {
	ctrl     *gomock.Controller
	recorder *MockaccessKeyerMockRecorder
	isgomock struct{}
}

// MockaccessKeyerMockRecorder is the mock recorder for MockaccessKeyer.
type MockaccessKeyerMockRecorder struct {
	mock *MockaccessKeyer
}

// NewMockaccessKeyer creates a new mock instance.
func NewMockaccessKeyer(ctrl *gomock.Controller) *MockaccessKeyer {
	mock := &MockaccessKeyer{ctrl: ctrl}
	mock.recorder = &MockaccessKeyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccessKeyer) EXPECT() *MockaccessKeyerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockaccessKeyer) Create(ctx context.Context, projectUUID, bucketName string) (*domain.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, projectUUID, bucketName)
	ret0, _ := ret[0].(*domain.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockaccessKeyerMockRecorder) Create(ctx, projectUUID, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockaccessKeyer)(nil).Create), ctx, projectUUID, bucketName)
}

// Revoke mocks base method.
func (m *MockaccessKeyer) Revoke(ctx context.Context, projectUUID, accessKey, secretID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ctx, projectUUID, accessKey, secretID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockaccessKeyerMockRecorder) Revoke(ctx, projectUUID, accessKey, secretID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockaccessKeyer)(nil).Revoke), ctx, projectUUID, accessKey, secretID)
}

// Mockcloudflarer is a mock of cloudflarer interface.
type Mockcloudflarer struct {
	ctrl     *gomock.Controller
	recorder *MockcloudflarerMockRecorder
	isgomock struct{}
}

// MockcloudflarerMockRecorder is the mock recorder for Mockcloudflarer.
type MockcloudflarerMockRecorder struct {
	mock *Mockcloudflarer
}

// NewMockcloudflarer creates a new mock instance.
func NewMockcloudflarer(ctrl *gomock.Controller) *Mockcloudflarer {
	mock := &Mockcloudflarer{ctrl: ctrl}
	mock.recorder = &MockcloudflarerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcloudflarer) EXPECT() *MockcloudflarerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockcloudflarer) Create(ctx context.Context, bucket, fullBucketPath, accessKey string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, bucket, fullBucketPath, accessKey)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockcloudflarerMockRecorder) Create(ctx, bucket, fullBucketPath, accessKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockcloudflarer)(nil).Create), ctx, bucket, fullBucketPath, accessKey)
}

// Delete mocks base method.
func (m *Mockcloudflarer) Delete(ctx context.Context, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockcloudflarerMockRecorder) Delete(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockcloudflarer)(nil).Delete), ctx, ids)
}

// MockdebugLogger is a mock of debugLogger interface.
type MockdebugLogger struct {
	ctrl     *gomock.Controller
	recorder *MockdebugLoggerMockRecorder
	isgomock struct{}
}

// MockdebugLoggerMockRecorder is the mock recorder for MockdebugLogger.
type MockdebugLoggerMockRecorder struct {
	mock *MockdebugLogger
}

// NewMockdebugLogger creates a new mock instance.
func NewMockdebugLogger(ctrl *gomock.Controller) *MockdebugLogger {
	mock := &MockdebugLogger{ctrl: ctrl}
	mock.recorder = &MockdebugLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdebugLogger) EXPECT() *MockdebugLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockdebugLogger) Info(args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockdebugLoggerMockRecorder) Info(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockdebugLogger)(nil).Info), args...)
}

// Infof mocks base method.
func (m *MockdebugLogger) Infof(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockdebugLoggerMockRecorder) Infof(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockdebugLogger)(nil).Infof), varargs...)
}
