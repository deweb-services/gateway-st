// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination=./mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/deweb-services/gateway-st/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessKeyer is a mock of AccessKeyer interface.
type MockAccessKeyer struct {
	ctrl     *gomock.Controller
	recorder *MockAccessKeyerMockRecorder
	isgomock struct{}
}

// MockAccessKeyerMockRecorder is the mock recorder for MockAccessKeyer.
type MockAccessKeyerMockRecorder struct {
	mock *MockAccessKeyer
}

// NewMockAccessKeyer creates a new mock instance.
func NewMockAccessKeyer(ctrl *gomock.Controller) *MockAccessKeyer {
	mock := &MockAccessKeyer{ctrl: ctrl}
	mock.recorder = &MockAccessKeyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessKeyer) EXPECT() *MockAccessKeyerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessKeyer) Create(ctx context.Context, ak *domain.AccessKey) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ak)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessKeyerMockRecorder) Create(ctx, ak any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessKeyer)(nil).Create), ctx, ak)
}

// Delete mocks base method.
func (m *MockAccessKeyer) Delete(ctx context.Context, projectUUID, name string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, projectUUID, name, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessKeyerMockRecorder) Delete(ctx, projectUUID, name, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessKeyer)(nil).Delete), ctx, projectUUID, name, force)
}

// Get mocks base method.
func (m *MockAccessKeyer) Get(ctx context.Context, projectUUID, name string) (*domain.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, projectUUID, name)
	ret0, _ := ret[0].(*domain.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccessKeyerMockRecorder) Get(ctx, projectUUID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessKeyer)(nil).Get), ctx, projectUUID, name)
}
